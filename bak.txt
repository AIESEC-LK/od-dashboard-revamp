import streamlit as st
import pandas as pd
import numpy as np
from typing import List
import altair as alt



st.title('OD Dashboard - AIESEC in Sri Lanka')

DATE_COLUMN = 'month_name'
DATA_URL = ('https://docs.google.com/spreadsheets/d/e/2PACX-1vRifHGM_iqkAo_9yWFckhtQOu7J-ybWSTJppU_JBhYq-cQegFDqgezIB6X5c3dHAODXDvKJ__AUZzvC/pub?gid=0&single=true&output=csv')


def load_data(nrows):
    data = pd.read_csv(DATA_URL, nrows=nrows)
    data[DATE_COLUMN] = pd.to_datetime(data[DATE_COLUMN], format='%Y %B', errors='coerce')
    data[DATE_COLUMN] = data[DATE_COLUMN].dt.strftime('%B %Y')
    return data

# Create a text element and let the reader know the data is loading.
data_load_state = st.text('Loading data...')
# Load 10,000 rows of data into the dataframe.
data = load_data(10000)
# Notify the reader that the data was successfully loaded.
data_load_state.text('Welcome for the OD Dashboard')

# Get unique entity and month lists
unique_entities = data['entity'].unique()
entity_list = list(unique_entities)

unique_month = data['month_name'].unique()
month_list = list(unique_month)

# Sidebar for user selection
selected_entity = st.sidebar.selectbox('Select Entity', entity_list)
selected_month = st.sidebar.selectbox('Select Month', month_list)

# Filter data based on user selection
filtered_data = data[(data['entity'] == selected_entity) & (data['month_name'] == selected_month)]

# Display the filtered data
# st.subheader('Scorecards')
# st.write(filtered_data)

# Create a pivot table based on the selected entity and month
# pivot_table = pd.pivot_table(filtered_data, values=['XDI', 'HDI', 'ODI'], index=['entity'], aggfunc=np.mean)

# Display the pivot table
# st.subheader('Summary')
# st.dataframe(pivot_table)
##006db0

def display_kpi_metrics(selected_entity, selected_month, kpis, title):
    st.header(f"{title}")

    # Filter data based on the selected entity and month
    filtered_data = data[(data['entity'] == selected_entity) & (data['month_name'] == selected_month)]

    # Get KPI values and names from the filtered data
    kpi_values = filtered_data[kpis].values[0]
    kpi_names = kpis

    num_cols = 7  # Number of columns to display KPIs
    num_kpis = len(kpi_values)
    
    # Calculate the number of rows needed based on the number of KPIs and columns
    num_rows = (num_kpis + num_cols - 1) // num_cols

    # Iterate over the rows and columns to display KPIs
    for i in range(num_rows):
        cols = st.columns(num_cols)
        for j in range(num_cols):
            idx = i * num_cols + j
            if idx < num_kpis:
                cols[j].metric(label=kpi_names[idx], value=kpi_values[idx])

# Display XDI Scores
xdi_kpis = ['DXP', 'iGTa', 'iGTe', 'iGV', 'oGTa', 'oGTe', 'oGV']
display_kpi_metrics(selected_entity, selected_month, xdi_kpis, "XDI Scores")

# Display HDI Scores
hdi_kpis = ['BD', 'Brand', 'EM', 'EwA & PR', 'FnL', 'IM', 'TM']
display_kpi_metrics(selected_entity, selected_month, hdi_kpis, "HDI Scores")

# Display XDI Scores
odi_kpis = ['ODI', 'XDI', 'HDI']
display_kpi_metrics(selected_entity, selected_month, odi_kpis, "ODI Scores")






####bar
# Display the filtered data
st.subheader(f'Bar Chart: Scores vs Function Name for {selected_entity} - {selected_month}')

# Create a bar chart using Altair
chart = alt.Chart(filtered_data.melt(id_vars=['entity'], var_name='Function', value_name='Score')).mark_bar().encode(
    x='Function:N',
    y='Score:Q'
).properties(
    width=600,
    height=300,
    title=f'Scores vs Function Name - {selected_entity} - {selected_month}'
)

# Display the chart using Streamlit
st.altair_chart(chart, use_container_width=True)


# Filter data based on selected month
filtered_data2 = data[data['month_name'] == selected_month]

# Display the DataFrame with functions in one column and selected entities
st.subheader(f'Entity vs Functions Scores for {selected_month}')
pivot_data = filtered_data2.set_index('entity').T.drop('month_name')
st.write(pivot_data)